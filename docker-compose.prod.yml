version: "3"

volumes:
  postgres_data: null
  elasticsearch_volume: null
  static_volume: null
  grafana_volume: null

services:
  db:
    image: postgres:12.0-alpine
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./settings/prod/.env.db
    ports:
      - "5432:5432"

  backend:
    container_name: backend
    build:
      context: ./backend
      args:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: "*"
        DJANGO_CORS_ORIGIN_WHITELIST: "*"
    command: gunicorn backend.wsgi --bind 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/backend/static
      - ./backend/:/backend/
    expose:
      - 8000
    env_file:
      - ./settings/prod/.env.prod

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "9100:9100"
    restart: always
    deploy:
      mode: global

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    container_name: cadvisor
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /etc/machine-id:/etc/machine-id:ro #디렉토리 오류나서 추가
    ports:
      - "8080:8080"
    restart: always
    privileged: true #디렉토리 오류나서 추가
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus:latest
    restart: always
    container_name: prometheus
    ports:
      - "9090:9090"
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    user: root
    depends_on:
      - cadvisor
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    build:
      context: ./grafana
    container_name: grafana
    ports:
      - "8082:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_volume:/var/lib/grafana

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: 7.16.3
    #    image: elasticsearch:7.16.3
    restart: always
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch_volume:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node
    env_file:
      - ./settings/prod/.env.elastic

#  kibana:
#    container_name: kibana
#    image: kibana:7.16.3
#    volumes:
#      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:8080"
    volumes:
      - static_volume:/backend/static
    depends_on:
      - backend
